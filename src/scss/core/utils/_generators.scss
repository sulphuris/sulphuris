/*
 * Generates media query via provided predefined breakpoint map item without
 * @media. Used by `breakpoint` mixin.
 * @see utils/_config.scss $breakpoints. $breakpoints is a globally defined var.
 *
 * @param $size: breakpoint map item name ('', sm, md, lg, xl, xxl)
 * @param $explicit: (boolean | optional) for generating min-max queries
 *
 * @return (string) e.g. `only screen and (min-width: 1366px)` or `only screen and (min-width: 1366px) and (max-width: 1679px)`
 */
@function generate-breakpoint($size, $explicit: false) {
  $query: 'only screen';
  $breakpoint: map-get($breakpoints, $size);

  @if $breakpoint != null {
    @if nth($breakpoint, 1) {
      $query: '#{$query} and (min-width: #{nth($breakpoint, 1)})';
    }

    @if $explicit {
      /* stylelint-disable-next-line max-nesting-depth */
      @if nth($breakpoint, 2) {
        $query: '#{$query} and (max-width: #{nth($breakpoint, 2)})';
      }
    }
  }

  @else {
    @warn '🜍 Undefined breakpoint: `#{$size}`! Please check your `_config.scss`.';
  }

  @return $query;
}

/*
 * Mixin for generating media queries. Uses `generate-breakpoint` function
 * @see utils/_config.scss $breakpoints. $breakpoints is a globally defined var.
 *
 * @param $size: (string) breakpoint map item name ('', sm, md, lg, xl, xxl)
 * @param $explicit: (boolean | optional) for generating min-max queries
 */
@mixin breakpoint($size, $explicit: false) {
  @if $explicit {
    @if $size == '' {
      @content;
    }

    @else {
      @media #{generate-breakpoint($size, $explicit)} {
        @content;
      }
    }
  }

  @else {
    @media #{generate-breakpoint($size, $explicit)} {
      @content;
    }
  }
}

@mixin generic-utility-class-generator($pref, $property, $b-name, $key, $value, $unit, $suff) {
  $gen-pref: trim-end($pref, '-'); // in case we want prefixes to have - in front of orientation
  @if $b-name {
    $b-name: -#{$b-name};
  }

  .#{$gen-pref}#{$b-name}-#{$key}#{$suff} {
    #{$property}: #{$value}#{$unit};
  }
}

@mixin orientated-utility-class-generator($pref, $property, $b-name, $key, $value, $unit, $suff) {
  @if $b-name {
    $b-name: -#{$b-name};
  }

  @each $o-name, $o-values in $orientations {
    .#{$pref}#{$o-name}#{$b-name}-#{$key}#{$suff} {
      @each $o-value in $o-values {
        #{$property}-#{$o-value}: #{$value}#{$unit};
      }
    }
  }
}

@mixin generic-and-orientaded-utility-class-generator(
  $pref,
  $property,
  $b-name,
  $values,
  $unit: '',
  $suff: '',
  $orientations: false) {

  @if type-of($values) == 'map' {
    @each $key, $value in $values {
      @include generic-utility-class-generator($pref, $property, $b-name, $key, $value, $unit, $suff);

      @if $orientations {
        @include orientated-utility-class-generator($pref, $property, $b-name, $key, $value, $unit, $suff);
      }
    }
  } @else {
    @each $value in $values {
      @include generic-utility-class-generator($pref, $property, $b-name, $value, $value, $unit, $suff);

      @if $orientations {
        @include orientated-utility-class-generator($pref, $property, $b-name, $value, $value, $unit, $suff);
      }
    }
  }
}

/*
 * Mixin for generating generic utility classes. E.g. `.t-32` => `top: 32px`
 * Uses `generate-breakpoint` function.
 * @see utils/_config.scss $breakpoints. $breakpoints is a globally defined var.
 * @see utils/_config.scss $orientations. $orientations is a globally defined
 * var.
 *
 * @param $pref: (string) base class name
 * @param $property: (string) css property name
 * @param $values: (list | map) list or a map of property values
 * @param $unit: (string) value unit
 * @param $suff: (string) generated class name suffix
 * @param $orientations: (map | optional) map of orientation property variations
 * @param $responsive: (boolean | optional) whether to generate responsive classes
 */
@mixin utility-class-generator(
  $pref,
  $property,
  $values,
  $unit: '',
  $suff: '',
  $orientations: false,
  $responsive: true ) {

  @include generic-and-orientaded-utility-class-generator($pref, $property, null, $values, $unit, $suff, $orientations);

  // responsive variations
  @if $responsive {
    @each $b-name, $b-value in $breakpoints {
      @if $b-name != '' {
        @media #{generate-breakpoint($b-name)} {
          @include generic-and-orientaded-utility-class-generator($pref, $property, $b-name, $values, $unit, $suff, $orientations);
        }
      }
    }
  }
}

@function color-palette-genrator($color-map, $color-name, $color-value, $mod: 10%) {
  @for $i from 1 through 9 {
    $grade: (10 - $i) * 100;
    $percentage: $i * $mod;
    $combined-name: #{$color-name}-#{$grade};
    $color-lightened: lighten($color-value, $percentage);

    $color-map: map-merge($color-map, ($combined-name: $color-lightened));
  }

  @return $color-map;
}

@mixin css-variable-generator($pref, $map) {
  @each $name, $value in $map {
    --#{$pref}-#{$name}: #{$value};
  }
}

@mixin grid-column-generator($columns, $responsive: true) {
  $base: 100 / $columns;
  $unit: '%';

  @for $i from 1 through $columns {
    .col-#{$i} {
      $width: $base * $i;
      width: #{$width}#{$unit};
    }
  }

  @if $responsive {
    @each $b-name, $b-value in $breakpoints {
      @if $b-name != '' {
        @media #{generate-breakpoint($b-name)} {
          @for $i from 1 through $columns {
            .col-#{$b-name}-#{$i} {
              $width: $base * $i;
              width: #{$width}#{$unit};
            }
          }
        }
      }
    }
  }
}

@function get-min-breakpoint-value() {
  $value: 0;

  @each $b-name, $b-value in $breakpoints {
    @if $b-name == '' {
      $value: nth($b-value, 2);
    }
  }

  @return $value;
}

@function get-max-breakpoint-value() {
  $value: 0;

  @each $b-name, $b-value in $breakpoints {
    @if nth($b-value, 2) == false {
      $value: nth($b-value, 1);
    }
  }

  @return $value;
}

@mixin grid-column-max-generator($columns) {
  $base: 100 / $columns;
  $max-breakpoint-value: get-max-breakpoint-value();

  @for $i from 1 through $columns - 1 {
    .col-#{$i}-max {
      $width: $base * $i;
      flex-grow: 1;
      max-width: ($max-breakpoint-value - $container-offset-mobile * 2 + $grid-gutter-mobile) * $width / 100;

      @include breakpoint($container-breakpoint) {
        max-width: ($max-breakpoint-value - $container-offset * 2 + $grid-gutter) * $width / 100;
      }
    }
  }
}

/* stylelint-disable max-nesting-depth */
@mixin grid-offset-generator($columns, $responsive: true) {
  $base: 100 / $columns;
  $unit: '%';

  @for $i from 0 through $columns - 1 {
    .col-offset-#{$i} {
      $width: $base * $i;
      margin-left: #{$width}#{$unit};

      .reversed & {
        margin-right: #{$width}#{$unit};
      }
    }
  }

  @if $responsive {
    @each $b-name, $b-value in $breakpoints {
      @if $b-name != '' {
        @media #{generate-breakpoint($b-name)} {
          @for $i from 0 through $columns - 1 {
            .col-offset-#{$b-name}-#{$i} {
              $width: $base * $i;
              margin-left: #{$width}#{$unit};

              .reversed & {
                margin-right: #{$width}#{$unit};
              }
            }
          }
        }
      }
    }
  }
}
/* stylelint-enable */

@mixin typography-rules-generator($typography-rules-array) {
  $font-size: null;
  $letter-spacing: null;
  $line-height: null;
  $font-weight: null;
  $text-transform: null;

  @if length($typography-rules-array) > 0 {
    $font-size: nth($typography-rules-array, 1);
  }

  @if length($typography-rules-array) > 1 {
    $letter-spacing: nth($typography-rules-array, 2);
  }

  @if length($typography-rules-array) > 2 {
    $line-height: nth($typography-rules-array, 3);
  }

  @if length($typography-rules-array) > 3 {
    $font-weight: nth($typography-rules-array, 4);
  }

  @if length($typography-rules-array) > 4 {
    $text-transform: nth($typography-rules-array, 5);
  }

  @if $font-size {
    font-size: rem($font-size);
  }

  @if $letter-spacing {
    letter-spacing: rem($letter-spacing);
  }

  @if $line-height {
    line-height: $line-height;
  }

  @if $font-weight {
    font-weight: $font-weight;
  }

  @if $text-transform {
    text-transform: $text-transform;
  }
}

@mixin typography-generator($map) {
  @each $key, $value in $map {
    #{$key} {
      @if type-of($value) == 'map'
        and map-has-key($value, mobile)
        and map-has-key($value, desktop) {
        $mobile: map-get($value, mobile);
        $desktop: map-get($value, desktop);

        @include typography-rules-generator($mobile);

        @include breakpoint($container-breakpoint) {
          @include typography-rules-generator($desktop);
        }
      }

      @else {
        @if type-of($value) == 'map'
          and map-has-key($value, desktop) {
          $desktop: map-get($value, desktop);
          @include typography-rules-generator($desktop);
        }

        @else {
          @include typography-rules-generator($value);
        }
      }
    }
  }
}
